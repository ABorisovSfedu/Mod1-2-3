#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤—è–∑–∏ –º–µ–∂–¥—É Mod1 –∏ Mod2
–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç "–°–æ–∑–¥–∞–π—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã" –∫–∞–∫ –±—É–¥—Ç–æ –æ–Ω –±—ã–ª –∑–∞–ø–∏—Å–∞–Ω –≤ Mod1
"""

import asyncio
import json
import hmac
import hashlib
import httpx
import os
import uuid
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
MOD1_URL = "http://localhost:8080"
MOD2_URL = "http://localhost:8000"
INGEST_SECRET = "changeme"

# –¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç
TEST_TEXT = "–°–æ–∑–¥–∞–π—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã"
SESSION_ID = f"test-{uuid.uuid4().hex[:8]}"

def create_signature(body: bytes, secret: str) -> str:
    """–°–æ–∑–¥–∞–µ—Ç HMAC-SHA256 –ø–æ–¥–ø–∏—Å—å"""
    sig = hmac.new(secret.encode("utf-8"), body, hashlib.sha256).hexdigest()
    return f"sha256={sig}"

async def send_chunk_to_mod2(text: str, session_id: str, seq: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —á–∞–Ω–∫ –≤ Mod2"""
    chunk_data = {
        "session_id": session_id,
        "chunk_id": f"chunk-{seq}",
        "seq": seq,
        "text": text,
        "overlap_prefix": None,
        "lang": "ru-RU"
    }
    
    body = json.dumps(chunk_data, ensure_ascii=False, separators=(",", ":")).encode("utf-8")
    headers = {
        "Content-Type": "application/json",
        "X-Signature": create_signature(body, INGEST_SECRET),
        "Idempotency-Key": f"{session_id}:chunk-{seq}",
        "X-Request-Id": f"{session_id}:{seq}",
    }
    
    async with httpx.AsyncClient(timeout=10) as client:
        response = await client.post(f"{MOD2_URL}/v2/ingest/chunk", content=body, headers=headers)
        return response

async def send_final_to_mod2(session_id: str, total_chunks: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ Mod2"""
    final_data = {
        "session_id": session_id,
        "text_full": TEST_TEXT,
        "lang": "ru-RU",
        "duration_sec": 5.0,
        "total_chunks": total_chunks
    }
    
    body = json.dumps(final_data, ensure_ascii=False, separators=(",", ":")).encode("utf-8")
    headers = {
        "Content-Type": "application/json",
        "X-Signature": create_signature(body, INGEST_SECRET),
        "Idempotency-Key": f"{session_id}:final",
        "X-Request-Id": f"{session_id}:final",
    }
    
    async with httpx.AsyncClient(timeout=10) as client:
        response = await client.post(f"{MOD2_URL}/v2/ingest/full", content=body, headers=headers)
        return response

async def get_layout_from_mod2(session_id: str):
    """–ü–æ–ª—É—á–∞–µ—Ç layout –∏–∑ Mod2"""
    async with httpx.AsyncClient(timeout=10) as client:
        response = await client.get(f"{MOD2_URL}/v2/session/{session_id}/layout")
        return response

async def main():
    print(f"üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤—è–∑–∏ Mod1 ‚Üí Mod2")
    print(f"üìù –¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç: '{TEST_TEXT}'")
    print(f"üÜî Session ID: {SESSION_ID}")
    print("-" * 50)
    
    try:
        # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞–Ω–∫
        print("1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞–Ω–∫ –≤ Mod2...")
        chunk_response = await send_chunk_to_mod2(TEST_TEXT, SESSION_ID, 1)
        print(f"   –°—Ç–∞—Ç—É—Å: {chunk_response.status_code}")
        if chunk_response.status_code == 200:
            print("   ‚úÖ –ß–∞–Ω–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {chunk_response.text}")
            return
        
        # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print("\n2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ Mod2...")
        final_response = await send_final_to_mod2(SESSION_ID, 1)
        print(f"   –°—Ç–∞—Ç—É—Å: {final_response.status_code}")
        if final_response.status_code == 200:
            print("   ‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {final_response.text}")
            return
        
        # 3. –ü–æ–ª—É—á–∞–µ–º layout
        print("\n3Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º layout –∏–∑ Mod2...")
        layout_response = await get_layout_from_mod2(SESSION_ID)
        print(f"   –°—Ç–∞—Ç—É—Å: {layout_response.status_code}")
        if layout_response.status_code == 200:
            layout_data = layout_response.json()
            print("   ‚úÖ Layout —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω:")
            print(f"   üìã –†–µ–∑—É–ª—å—Ç–∞—Ç:")
            print(json.dumps(layout_data, ensure_ascii=False, indent=2))
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {layout_response.text}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")

if __name__ == "__main__":
    asyncio.run(main())