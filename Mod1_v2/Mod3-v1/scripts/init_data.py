#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ Mod3-v1
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(__file__)))

from sqlalchemy.orm import Session
from app.database import SessionLocal, engine
from app.models import Base, Term, Synonym, Component, Mapping, Template
from config.settings import settings


def init_database():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    Base.metadata.create_all(bind=engine)
    print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã")


def init_basic_data():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    db = SessionLocal()
    
    try:
        # –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        template = db.query(Template).filter(Template.name == "hero-main-footer").first()
        if not template:
            template = Template(
                name="hero-main-footer",
                description="Default template with hero, main and footer sections",
                structure={
                    "sections": ["hero", "main", "footer"],
                    "rules": {
                        "ContactForm": "footer",
                        "ServicesGrid": "main",
                        "Hero": "hero",
                        "ui.button": "main",
                        "ui.form": "main"
                    }
                },
                is_default=True
            )
            db.add(template)
            db.flush()
            print("‚úÖ –®–∞–±–ª–æ–Ω —Å–æ–∑–¥–∞–Ω")
        
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        components_data = [
            {"name": "Hero", "component_type": "Hero", "description": "–ì–ª–∞–≤–Ω—ã–π –±–∞–Ω–Ω–µ—Ä"},
            {"name": "ContactForm", "component_type": "ContactForm", "description": "–§–æ—Ä–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"},
            {"name": "ServicesGrid", "component_type": "ServicesGrid", "description": "–°–µ—Ç–∫–∞ —É—Å–ª—É–≥"},
            {"name": "ui.button", "component_type": "ui.button", "description": "–ö–Ω–æ–ø–∫–∞"},
            {"name": "ui.form", "component_type": "ui.form", "description": "–§–æ—Ä–º–∞"},
        ]
        
        for comp_data in components_data:
            component = db.query(Component).filter(Component.name == comp_data["name"]).first()
            if not component:
                component = Component(**comp_data)
                db.add(component)
        
        db.flush()
        print("‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω—ã")
        
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –∏ –º–∞–ø–ø–∏–Ω–≥–∏
        terms_data = [
            {
                "term": "–∫–Ω–æ–ø–∫–∞",
                "description": "–≠–ª–µ–º–µ–Ω—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π",
                "synonyms": ["button", "–∫–Ω–æ–ø–æ—á–∫–∞"],
                "components": [{"name": "ui.button", "confidence": 1.0}]
            },
            {
                "term": "—Ñ–æ—Ä–º–∞",
                "description": "–≠–ª–µ–º–µ–Ω—Ç –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö",
                "synonyms": ["form", "—Ñ–æ—Ä–º–æ—á–∫–∞"],
                "components": [{"name": "ui.form", "confidence": 1.0}]
            },
            {
                "term": "–æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å",
                "description": "–§–æ—Ä–º–∞ –¥–ª—è —Å–≤—è–∑–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏",
                "synonyms": ["contact", "—Å–≤—è–∑—å", "–∫–æ–Ω—Ç–∞–∫—Ç", "feedback"],
                "components": [{"name": "ContactForm", "confidence": 1.0}]
            },
            {
                "term": "—É—Å–ª—É–≥–∏",
                "description": "–ö–∞—Ç–∞–ª–æ–≥ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º—ã—Ö —É—Å–ª—É–≥",
                "synonyms": ["services", "–∫–∞—Ç–∞–ª–æ–≥", "—Å–µ—Ä–≤–∏—Å—ã"],
                "components": [{"name": "ServicesGrid", "confidence": 1.0}]
            }
        ]
        
        for term_data in terms_data:
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Ä–º–∏–Ω
            term = db.query(Term).filter(Term.term == term_data["term"]).first()
            if not term:
                term = Term(
                    term=term_data["term"],
                    description=term_data["description"]
                )
                db.add(term)
                db.flush()
            
            # –°–æ–∑–¥–∞–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã
            for synonym_name in term_data["synonyms"]:
                if not db.query(Synonym).filter(
                    Synonym.term_id == term.id,
                    Synonym.synonym == synonym_name
                ).first():
                    synonym = Synonym(
                        term_id=term.id,
                        synonym=synonym_name
                    )
                    db.add(synonym)
            
            # –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥–∏
            for comp_data in term_data["components"]:
                component = db.query(Component).filter(Component.name == comp_data["name"]).first()
                if component and not db.query(Mapping).filter(
                    Mapping.term_id == term.id,
                    Mapping.component_id == component.id
                ).first():
                    mapping = Mapping(
                        term_id=term.id,
                        component_id=component.id,
                        confidence=comp_data["confidence"]
                    )
                    db.add(mapping)
        
        db.commit()
        print("‚úÖ –¢–µ—Ä–º–∏–Ω—ã –∏ –º–∞–ø–ø–∏–Ω–≥–∏ —Å–æ–∑–¥–∞–Ω—ã")
        
    except Exception as e:
        db.rollback()
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise
    finally:
        db.close()


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Mod3-v1...")
    
    try:
        init_database()
        init_basic_data()
        print("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()

